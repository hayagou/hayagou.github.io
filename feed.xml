<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://hayagou.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hayagou.github.io/" rel="alternate" type="text/html" /><updated>2020-02-16T01:10:03+09:00</updated><id>https://hayagou.github.io/feed.xml</id><title type="html">Hayagou</title><author><name>hayagou</name></author><entry><title type="html">IntelliJ에서 Gradle로 자바 프로젝트 만들기</title><link href="https://hayagou.github.io/2019/02/02/gradle.html" rel="alternate" type="text/html" title="IntelliJ에서 Gradle로 자바 프로젝트 만들기" /><published>2019-02-02T08:45:13+09:00</published><updated>2019-02-02T08:45:13+09:00</updated><id>https://hayagou.github.io/2019/02/02/gradle</id><content type="html" xml:base="https://hayagou.github.io/2019/02/02/gradle.html">&lt;h1 id=&quot;gradle-build-tool&quot;&gt;Gradle Build Tool&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;gradle-wrapper란&quot;&gt;Gradle Wrapper란?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트를 새로운 환경에서 개발할때 라이브러리들을 옮길 필요없이 바로 빌드를 가능하게 해줌
스프링 Maven프로젝트의 pox.xml에 기술하면 라이브러리가 추가되는거랑 똑같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;intellij로-java-프로젝트-만들기-with-gradle&quot;&gt;IntelliJ로 Java 프로젝트 만들기 with Gradle&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;인텔리제이를 통해 gradle 프로젝트를 만들고 간단하게 추가하는 방법이다..
구글에 검색하면 다른 방법들이 많은데 간단하게 추가한 방법을 기록했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;인텔리제이를 키고,
&lt;img src=&quot;/img/posts/gradle/main.png&quot; alt=&quot;gradle&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gradle로 프로젝트를 만든다.
&lt;img src=&quot;/img/posts/gradle/gradle.png&quot; alt=&quot;gradle&quot; class=&quot;img-responsive center-block&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로젝트 설정들을 하고,
&lt;img src=&quot;/img/posts/gradle/gradle1.png&quot; alt=&quot;gradle&quot; class=&quot;img-responsive center-block&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조금 기다리면 프로젝트가 생성된다.
&lt;img src=&quot;/img/posts/gradle/gradle2.png&quot; alt=&quot;gradle&quot; class=&quot;img-responsive center-block&quot; width=&quot;900&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;실행될 메 클래스를 만들고, Project Name &amp;gt; src &amp;gt; build.gradle 로 가서 원하 의존성을 추가해준다.
&lt;img src=&quot;/img/posts/gradle/gradle3.png&quot; alt=&quot;gradle&quot; class=&quot;img-responsive center-block&quot; width=&quot;900&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오른쪽의 새로고침 버튼을 누르고 외부 라이브러리가 추가 된다.
&lt;img src=&quot;/img/posts/gradle/gradle4.png&quot; alt=&quot;gradle&quot; class=&quot;img-responsive center-block&quot; width=&quot;900&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;의존-라이브러리&quot;&gt;의존 라이브러리&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;저장소에서 필요한 라이브러리를 적어주고 사용할수 있는 것이 dependencies라는 문이다.
기본 형태는&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dependencies{
	.... 라이브러리 ....
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 형식이고 {} 안에 종속 라이브러리에 대한 기술을 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;컴파일시-의존-라이브러리-문법&quot;&gt;컴파일시 의존 라이브러리 문법&lt;/h3&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile 'org.json:json:20190722'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;compile~&lt;/strong&gt; 컴파일시에 사용하는 라이브러리를 지정한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;테스트-컴파일시-의존-라이브러리-문법&quot;&gt;테스트 컴파일시 의존 라이브러리 문법&lt;/h3&gt;
&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;testCompile 'junit:junit:4.12'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;testCompile~&lt;/strong&gt; 테스트 컴파일시에 사용하는 라이브러리를 지정한다. (단위 테스트할때 사용)
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;라이브러리-지정하는-방법&quot;&gt;라이브러리 지정하는 방법&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/gradle/gradle5.png&quot; alt=&quot;gradle&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 사진 처럼 작성한다. 라이브러리 지정하는 방법에 규칙이 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'그룹 : 이름 : 버젼 '
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이런 형태로 기술한다.&lt;/p&gt;

&lt;p&gt;쓰고 싶은 라이브러리는 &lt;strong&gt;&lt;a href=&quot;https://mvnrepository.com/&quot;&gt;메이븐레파지토리&lt;/a&gt;&lt;/strong&gt;에서 검색을 하여 추가한다.&lt;/p&gt;

&lt;p&gt;에를 들어서 Json 라이브러리를 추가하여 사용하고 싶다면,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;메이븐 레파지토리에서 json을 검색후 그륩, 이름, 버젼을 찾아낸다.
&lt;img src=&quot;/img/posts/gradle/gradle6.png&quot; alt=&quot;gradle&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;build.gradle 을 열고 dependencies에 추가한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile       'org.jason :      json :            20190722'
                    ↓              ↓                  ↓
compile gruop:'org.jason',name:'jason',version:'20190722'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이러한 형식으로 사용한다.&lt;/p&gt;</content><author><name>hayagou</name></author><summary type="html">Gradle Build Tool</summary></entry><entry><title type="html">블록체인, 비트코인 소스코드 분석</title><link href="https://hayagou.github.io/2019/01/02/blockchain.html" rel="alternate" type="text/html" title="블록체인, 비트코인 소스코드 분석" /><published>2019-01-02T08:45:13+09:00</published><updated>2019-01-02T08:45:13+09:00</updated><id>https://hayagou.github.io/2019/01/02/blockchain</id><content type="html" xml:base="https://hayagou.github.io/2019/01/02/blockchain.html">&lt;h1 id=&quot;비트-코인-소스-분석&quot;&gt;비트 코인 소스 분석&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;가상화폐중 비트코인에 대한 관심이 많다. 그레서 이번 프로젝트의 한부분으로 가상화폐를 이용하여 전자거 시스템을 만들려고 한다.
이번에 진행하는 프로젝트의 한부분인 블록체인 기술을 활용하여 가상화폐를 구현 해야한다.
구글에 검색하고 유튜브에 검색을 해도 자료가 많이 없어서 우선은 가장유명한 가상화폐인 비트코인 코드부터 분석을 하려고 한다. 오픈소스라 깃허브에 소스코드가 올라와있다.
비트코인의 소스를 분석하고 분석한것을 바탕으로 가상화폐를 구현할 것이다.&lt;/p&gt;

&lt;p&gt;직접 구현을 하기전에 블록체인이라는 기술에 대하여 알아야할것 같아서 인터넷 검색을 통해 자료를 정리하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;가상화폐란&quot;&gt;가상화폐란?&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;블록체인을 말로 풀어서 설명하면
&lt;strong&gt;거래기록등 여러 데이터들이 한 블록에 들어있고 그 블록들이 체인으로 이어져 있다&lt;/strong&gt;
는 것이다. 이블록들은 변조를 시켜 부당한 이득을 취할수 없게 블록은 해쉬값을 가지고있다.&lt;/p&gt;

&lt;p&gt;여기서 가장 큰 특징은 블록으로 이루어진 체인들을 가상화폐를 소유하고 있는 모든 사용자가 블록에 대한 정보를 가지고있다. 
&lt;strong&gt;데이터 분산 처리 기술&lt;/strong&gt; 이 적용 되어 데이터가 변조된다고 해도 블록체인에 참여한 사용자 50%를 설득하지못하면 변조된 데이터를 폐기한다. 그렇게 때문에 변조가 거의 불가능하다.
이러한 특징때문에 중앙(은행)에서 거래 내역을 관리하는 기존화폐와는 달리 블록체인은 참여자들 모두 거래내역을 가지고있어 중앙 관리자가 필요가 없게된다.(분산저장)&lt;/p&gt;

&lt;p&gt;블록체인 기술을 활용하여 비트코인을 만든 ‘나카모토 사토시’가 쓴 &lt;a href=&quot;/assets/bitcoin-translated-korean-180105.pdf&quot; download=&quot;&quot;&gt;논문&lt;/a&gt;을 읽어보면 좋을것 같다. 한글로 번역된 논문을 구했는데 읽어보니 어려워서 이해를 못했다….&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;비트코인-소스&quot;&gt;비트코인 소스&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bitcoin/bitcoin&quot;&gt;비트코인 깃허브&lt;/a&gt; 로 가면 C++로된 비트코인 소스를 받을수 있다.&lt;/p&gt;

&lt;p&gt;나는 스프링 프레임워크로 웹을 만들어서 동작시킬 계획이라 똑같은 언어인 자바로 구현하는게 좋을것 같아서 &lt;a href=&quot;https://github.com/bitcoinj/bitcoinj&quot;&gt;자바로 구현된 비트코인 소스&lt;/a&gt;를 분석할 생각이다.&lt;/p&gt;

&lt;p&gt;압축을 풀어주면 코드들이 보인다.
&lt;img src=&quot;/img/posts/block/coinj.png&quot; alt=&quot;비트코인J&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;풀어준 파일들을 IDE로 임폴트 시킨다.
임포트 시킬때 gradle이란 빌드시스템을 추가해야지 동작이된다.
스프링에 maven이랑 비슷한 빌드 시스템인데 라이브러리들을 관리하기 위한것으로 별도로 라이브러리들을 설치할필요없이 바로 빌드할수있게 해주는 시스템이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/block/coinj1.png&quot; alt=&quot;비트코인J&quot; class=&quot;img-responsive center-block&quot; width=&quot;800&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;소스파일들을 열어보면 코드가 너무 어렵다… 주석을 보면서 실행시키면서 어떻게 돌아가는건지 분석을하고 정리해봐야 겠다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;기본구조&quot;&gt;기본구조&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;bitcoinj 의 구조&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NetworkParameters : 네트워크를 선택하는 객체&lt;/li&gt;
  &lt;li&gt;Wallet : ECKey와 다른 데이터들을 저장하는 객체&lt;/li&gt;
  &lt;li&gt;PeerGroup : 네트워크연결을 관리하는 객체&lt;/li&gt;
  &lt;li&gt;BlockChain : 비트코인이 동작하기 위해 공유되거나 전체적인 데이터 구조를 관리하는 객체&lt;/li&gt;
  &lt;li&gt;BlockStore : 블록체인 데이터 구조를 유지하는 객체, ex) 디스크&lt;/li&gt;
  &lt;li&gt;WalletEventListener : Wallet 이벤트를 받을수있게록한 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 객체들을 사용하여 각각 설정을 따로 해줄수 있다.
간단하게 설정을 하기 위해 WalletAppKit이라는 객체가 존재한다.&lt;/p&gt;

&lt;p&gt;가장 먼저 WalletAppKit이라는 객체를 분석해보자&lt;/p&gt;

&lt;p&gt;WalletAppKit이라는 객체의 위치로 가서 코드를 보자!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/block/coinj2.png&quot; alt=&quot;비트코인J&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가장 먼저 생성자를 본다.&lt;/p&gt;
&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px;border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;12&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;13&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;14&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;15&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;16&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;17&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;18&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;19&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;20&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;21&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;22&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;23&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;24&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;25&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;26&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;27&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0;text-align:left&quot;&gt;&lt;div style=&quot;margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Creates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;WalletAppKit,&amp;nbsp;with&amp;nbsp;a&amp;nbsp;newly&amp;nbsp;created&amp;nbsp;{@link&amp;nbsp;Context}.&amp;nbsp;Files&amp;nbsp;will&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;the&amp;nbsp;given&amp;nbsp;directory.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;WalletAppKit(NetworkParameters&amp;nbsp;params,&amp;nbsp;File&amp;nbsp;directory,&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;&amp;nbsp;filePrefix)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;Context(params),&amp;nbsp;Script.ScriptType.P2PKH,&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;null&lt;/span&gt;,&amp;nbsp;directory,&amp;nbsp;filePrefix);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Creates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;WalletAppKit,&amp;nbsp;with&amp;nbsp;a&amp;nbsp;newly&amp;nbsp;created&amp;nbsp;{@link&amp;nbsp;Context}.&amp;nbsp;Files&amp;nbsp;will&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;the&amp;nbsp;given&amp;nbsp;directory.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;WalletAppKit(NetworkParameters&amp;nbsp;params,&amp;nbsp;Script.ScriptType&amp;nbsp;preferredOutputScriptType,&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Nullable&amp;nbsp;KeyChainGroupStructure&amp;nbsp;structure,&amp;nbsp;File&amp;nbsp;directory,&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;&amp;nbsp;filePrefix)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;Context(params),&amp;nbsp;preferredOutputScriptType,&amp;nbsp;structure,&amp;nbsp;directory,&amp;nbsp;filePrefix);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Creates&amp;nbsp;a&amp;nbsp;new&amp;nbsp;WalletAppKit,&amp;nbsp;with&amp;nbsp;the&amp;nbsp;given&amp;nbsp;{@link&amp;nbsp;Context}.&amp;nbsp;Files&amp;nbsp;will&amp;nbsp;be&amp;nbsp;stored&amp;nbsp;in&amp;nbsp;the&amp;nbsp;given&amp;nbsp;directory.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;WalletAppKit(Context&amp;nbsp;context,&amp;nbsp;Script.ScriptType&amp;nbsp;preferredOutputScriptType,&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Nullable&amp;nbsp;KeyChainGroupStructure&amp;nbsp;structure,&amp;nbsp;File&amp;nbsp;directory,&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;&amp;nbsp;filePrefix)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;.context&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;context;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;.params&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;checkNotNull(context.getParams());&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;.preferredOutputScriptType&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;checkNotNull(preferredOutputScriptType);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;.structure&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;structure&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;null&lt;/span&gt;&amp;nbsp;?&amp;nbsp;structure&amp;nbsp;:&amp;nbsp;KeyChainGroupStructure.DEFAULT;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;.directory&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;checkNotNull(directory);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;.filePrefix&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;checkNotNull(filePrefix);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right;margin-top:-13px;margin-right:5px;font-size:9px;font-style:italic&quot;&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;주석을 읽어보면 새로운 WalletAppKit 객체를 만들고 지정된 경로에 파일을 생성한다고한다… 생성자를 봐도 뭔지 잘모르겟다.&lt;/p&gt;

&lt;p&gt;다행 사용하는 예시가 있었다…
&lt;img src=&quot;/img/posts/block/coinj3.png&quot; alt=&quot;비트코인J&quot; class=&quot;img-responsive center-block&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫번째로 해야할 일이 네트워크 설정이다.
NetworkParameters 라는 객체를 사용하여 네트워크 설정을 한다. 설정을 하기위한 옵션은 3개가 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MainNetParams : 설명은 안적혀있지만 눈치껏 실제 서비스를 하기위한 네트워크 설정인것 같다.&lt;/li&gt;
  &lt;li&gt;TestNet3Params : 실제 네트워크에서 테스트하기위한 설정, MainNet과 같은 규칙을 따른다&lt;/li&gt;
  &lt;li&gt;RegTestParams : 개발하는동안 로컬 네트워크에서 테스팅을위한 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우선 예제를 바로 실행시켜보았다. 좀 결과를 보는데 조금 오래 걸리지만 실행이 되었다.
&lt;img src=&quot;/img/posts/block/coinj4.png&quot; alt=&quot;비트코인J&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;</content><author><name>hayagou</name></author><summary type="html">비트 코인 소스 분석</summary></entry><entry><title type="html">Command Pattern</title><link href="https://hayagou.github.io/2017/01/16/command.html" rel="alternate" type="text/html" title="Command Pattern" /><published>2017-01-16T08:45:13+09:00</published><updated>2017-01-16T08:45:13+09:00</updated><id>https://hayagou.github.io/2017/01/16/command</id><content type="html" xml:base="https://hayagou.github.io/2017/01/16/command.html">&lt;h1 id=&quot;디자인패턴-comand-pattern&quot;&gt;[디자인패턴] Comand Pattern&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;의도&quot;&gt;의도&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;요청 자체를 캡슐화하는 것, 이를 통해 요청이 서로 다른 사용자를 매개변수로 만들고, 요청을 대기시키거나 로깅하며, 되돌릴 수 있는 연산을 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ds/command.png&quot; alt=&quot;Command 패턴&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;</content><author><name>hayagou</name></author><summary type="html">[디자인패턴] Comand Pattern</summary></entry><entry><title type="html">Iterator Pattern</title><link href="https://hayagou.github.io/2017/01/15/iterator.html" rel="alternate" type="text/html" title="Iterator Pattern" /><published>2017-01-15T08:45:13+09:00</published><updated>2017-01-15T08:45:13+09:00</updated><id>https://hayagou.github.io/2017/01/15/iterator</id><content type="html" xml:base="https://hayagou.github.io/2017/01/15/iterator.html">&lt;h1 id=&quot;디자인패턴-iterator-pattern&quot;&gt;[디자인패턴] Iterator Pattern&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;의도&quot;&gt;의도&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;내부 표현부를 노출하지 않고 어떤 객체 집합에 속한 원소들을 순차적으로 접근할 수 있는 방법을 제공하는 패턴&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;활용성&quot;&gt;활용성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;객체 내부 표현 방식을 모르고도 집합 객체의 각 원소들에 접근하고 싶을 때&lt;/li&gt;
  &lt;li&gt;집합 객체를 순회하는 다양한 방법을 지원하고 싶을 때&lt;/li&gt;
  &lt;li&gt;서로 다른 집합 객체 구조에 대해서도 동일한 방법으로 순회하고 싶을 때&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ds/iterator.png&quot; alt=&quot;iterator 패턴&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;</content><author><name>hayagou</name></author><summary type="html">[디자인패턴] Iterator Pattern</summary></entry><entry><title type="html">Proxy Pattern</title><link href="https://hayagou.github.io/2017/01/14/proxy.html" rel="alternate" type="text/html" title="Proxy Pattern" /><published>2017-01-14T08:45:13+09:00</published><updated>2017-01-14T08:45:13+09:00</updated><id>https://hayagou.github.io/2017/01/14/proxy</id><content type="html" xml:base="https://hayagou.github.io/2017/01/14/proxy.html">&lt;h1 id=&quot;디자인패턴-proxy-pattern&quot;&gt;[디자인패턴] Proxy Pattern&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;의도&quot;&gt;의도&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;다른 객체에 대한 접근을 제어하기 위한 대리자 또는 자리채움자 역할을 하는 객체를 둠
= 실제 기능을 수행하는 객체Real Object 대신 가상의 객체Proxy Object를 사용해 로직의 흐름을 제어하는 디자인패턴&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;원래 하려던 기능을 수행하며 그외의 부가적인 작업(로깅, 인증, 네트워크 통신 등)을 수행하기에 좋음&lt;/li&gt;
  &lt;li&gt;비용이 많이 드는 연산(DB 쿼리, 대용량 텍스트 파일 등)을 실제로 필요한 시점에 수행할 수 있음&lt;/li&gt;
  &lt;li&gt;사용자 입장에서는 프록시 객체나 실제 객체나 사용법은 유사하므로 사용성이 좋음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ds/proxy.png&quot; alt=&quot;proxy 패턴&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;활용성&quot;&gt;활용성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;원격지 프록시(remote proxy)&lt;/li&gt;
  &lt;li&gt;가상 프록시(virtual proxy) : 요청이 있을 때만 필요한 고비용 객체를 생성, ex&amp;gt;ImageProxy&lt;/li&gt;
  &lt;li&gt;보호용 프록시(protection proxy):원래 객체에 대한 실제 접근을 제어함,객체별로 접근 제어 권한이 다를 때 유용&lt;/li&gt;
&lt;/ul&gt;</content><author><name>hayagou</name></author><summary type="html">[디자인패턴] Proxy Pattern</summary></entry><entry><title type="html">State Pattern</title><link href="https://hayagou.github.io/2017/01/13/state.html" rel="alternate" type="text/html" title="State Pattern" /><published>2017-01-13T08:45:13+09:00</published><updated>2017-01-13T08:45:13+09:00</updated><id>https://hayagou.github.io/2017/01/13/state</id><content type="html" xml:base="https://hayagou.github.io/2017/01/13/state.html">&lt;h1 id=&quot;디자인패턴-state-pattern&quot;&gt;[디자인패턴] State Pattern&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;의도&quot;&gt;의도&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체의  내부  상태에  따라  스스로  행동을  변경할  수  있게끔  허가하는  패턴으로, 이렇게  하면  객체는  마치
자신의  클래스를  바꾸는  것처럼  보임&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;유한상태객체(FSM, Context)로  부터  상태를  분리하고  행동을  상태에게  위임함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;활용성&quot;&gt;활용성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체의  행동이  상태에  따라  달라지고, 런타임에  행동이  바뀔때&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;객체의  상태에  따라  달라지는  다중  분기  조건  처리가  맣이  들어  있을  때&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ds/state.png&quot; alt=&quot;state 패턴&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(cf) Strategy Pattern - class diagram이  동일함&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[전략  패턴] client가 context의  행동(strategy)을  설정(변경)함, (용도) context의  유연한  행동  변경&lt;/p&gt;

&lt;p&gt;[상태  패턴] context 자신이  상태  변경을  통해  행동을  변경함, (용도) (context의) case analysis의  대안&lt;/p&gt;

&lt;h2 id=&quot;state-pattern-참고&quot;&gt;State Pattern 참고&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Finite State Machine(FSM)&lt;/p&gt;

&lt;h3 id=&quot;basic-concepts&quot;&gt;Basic concepts&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;한  순간  오직  하나의  상태를  가짐&lt;/li&gt;
  &lt;li&gt;한  상태에서  다른  상태로  전이  될  수  있음&lt;/li&gt;
  &lt;li&gt;상태전이는  외부입력(사건,행동)에  의해  야기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mealy macine -&amp;gt; 6-tuple(상태집합, 초기상태, 유한입력집합, 유한출력집합, 전이함수, 출력함수)&lt;/p&gt;

&lt;p&gt;Moore machine -&amp;gt; 출력함수: 상태집합 -&amp;gt; 출력집합(출력은  오직  현재  상태에만  의존함)&lt;/p&gt;

&lt;p&gt;사건 event - 시스테멩  영향을  주는  것(타입)&lt;/p&gt;

&lt;p&gt;상태  변수 state variable - 상태를  나타내느  변수, 두  종류가  있음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enumeratable state variable) 질적qualitative 상태 ex&amp;gt; 열거형&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Extended state variable) 양적quantitative 상태 ex&amp;gt;int&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Problem) 상태변수의  변경이  항상 state transition을  야기한다면 state explosion&lt;/li&gt;
  &lt;li&gt;Solution) 가드  조건 - 확장된  상태변수와  사건  파라미터로  이루어진 boolean expression&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;가드는  확장된  상태변수의 state explosion을  방지할  수  있다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상태  전이 state transition : 상태 x 행동 x 가드 -&amp;gt; 상태&lt;/li&gt;
&lt;/ul&gt;</content><author><name>hayagou</name></author><summary type="html">[디자인패턴] State Pattern</summary></entry><entry><title type="html">Template Method Pattern</title><link href="https://hayagou.github.io/2017/01/12/template_method.html" rel="alternate" type="text/html" title="Template Method Pattern" /><published>2017-01-12T08:45:13+09:00</published><updated>2017-01-12T08:45:13+09:00</updated><id>https://hayagou.github.io/2017/01/12/template_method</id><content type="html" xml:base="https://hayagou.github.io/2017/01/12/template_method.html">&lt;h1 id=&quot;디자인패턴-template-method-pattern&quot;&gt;[디자인패턴] Template Method Pattern&lt;/h1&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤  작업을  처리하는  일부분을  서브  클래스로  캡슐화해  전체  일을  수행하는  구조는  바꾸지  않으면서  특정단계에서  수행하는  내역을  바꾸는  패턴&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;즉, &lt;strong&gt;전체적으로는&lt;/strong&gt;  &lt;strong&gt;동일하면서&lt;/strong&gt;  &lt;strong&gt;부분적으로는&lt;/strong&gt;  &lt;strong&gt;다른&lt;/strong&gt;  &lt;strong&gt;구문으로&lt;/strong&gt;  &lt;strong&gt;구성된&lt;/strong&gt;  &lt;strong&gt;메서드의&lt;/strong&gt;  &lt;strong&gt;코드&lt;/strong&gt;  &lt;strong&gt;중복을&lt;/strong&gt;  &lt;strong&gt;최소화&lt;/strong&gt;  할  때  유용하다.&lt;/li&gt;
  &lt;li&gt;다른  관점에서  보면  동일한  기능을  상위  클래스에서  정의하면서  확장/변화가  필요한  부분만  서브  클래스에서  구현할  수  있도록  한다.&lt;/li&gt;
  &lt;li&gt;예를  들어, 전체적인  알고리즘은  상위  클래스에서  구현하면서  다른  부분은  하위  클래스에서  구현할  수  있도록  함으로써  전체적인  알고리즘  코드를  재사용하는  데  유용하도록  한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ds/template_mathod.png&quot; alt=&quot;template_mathod 패턴&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;역할이--수행하는--작업&quot;&gt;역할이  수행하는  작업&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;AbstractClass : 템플릿  메서드를  정의하는  클래스, 하위  클래스에  공통  알고리즘을  정의하고  하위  클래스에서  구현될  기능을 primitive 메서드  또는 hook 메서드로  정의하는  클래스&lt;/li&gt;
  &lt;li&gt;ConcreteClass : 물려받은 primitive 메서드  또는 hook 메서드를  구현하는  클래스 ,상위  클래스에  구현된  템플릿  메서드의  일반적인  알고리즘에서  하위  클래스에  적합하게 primitive 메서드나 hook 메서드를  오버라이드하는  클래스&lt;/li&gt;
&lt;/ul&gt;</content><author><name>hayagou</name></author><summary type="html">[디자인패턴] Template Method Pattern</summary></entry><entry><title type="html">Facade Pattern</title><link href="https://hayagou.github.io/2017/01/11/facade.html" rel="alternate" type="text/html" title="Facade Pattern" /><published>2017-01-11T08:45:13+09:00</published><updated>2017-01-11T08:45:13+09:00</updated><id>https://hayagou.github.io/2017/01/11/facade</id><content type="html" xml:base="https://hayagou.github.io/2017/01/11/facade.html">&lt;h1 id=&quot;디자인패턴-facade-pattern&quot;&gt;[디자인패턴] Facade Pattern&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 서브시스템의 일련의 인터페이스에 대한 통합된 인터페이스를 제공한다.&lt;/li&gt;
  &lt;li&gt;퍼사드에서 고수준 인터페이스를 정의하기 때문에 서브시스템을 더 쉽게 사용할수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ds/facade.png&quot; alt=&quot;facade 패턴&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ds/facade1.png&quot; alt=&quot;facade 패턴&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;</content><author><name>hayagou</name></author><summary type="html">[디자인패턴] Facade Pattern</summary></entry><entry><title type="html">Adapter Pattern</title><link href="https://hayagou.github.io/2017/01/10/adaptor.html" rel="alternate" type="text/html" title="Adapter Pattern" /><published>2017-01-10T08:45:13+09:00</published><updated>2017-01-10T08:45:13+09:00</updated><id>https://hayagou.github.io/2017/01/10/adaptor</id><content type="html" xml:base="https://hayagou.github.io/2017/01/10/adaptor.html">&lt;h1 id=&quot;디자인패턴-adapter-pattern&quot;&gt;[디자인패턴] Adapter Pattern&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;adapter pattern은 관계가 없는 인터페이스들이 같이 일할 수 있도록 도와주는 디자인 패턴이다.&lt;/li&gt;
  &lt;li&gt;2가지 방법 : OBJECT adapter pattern (구성),  CLASS adapter pattern(다중 상속)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ds/adapter.png&quot; alt=&quot;adapter 패턴&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ds/adapter1.png&quot; alt=&quot;adapter 패턴&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;</content><author><name>hayagou</name></author><summary type="html">[디자인패턴] Adapter Pattern</summary></entry><entry><title type="html">Abstract Factory Pattern</title><link href="https://hayagou.github.io/2017/01/09/abstract_factory.html" rel="alternate" type="text/html" title="Abstract Factory Pattern" /><published>2017-01-09T08:45:13+09:00</published><updated>2017-01-09T08:45:13+09:00</updated><id>https://hayagou.github.io/2017/01/09/abstract_factory</id><content type="html" xml:base="https://hayagou.github.io/2017/01/09/abstract_factory.html">&lt;h1 id=&quot;디자인패턴-abstract-factory-pattern&quot;&gt;[디자인패턴] Abstract Factory Pattern&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;구체적인  클래스에  의존하지  않고  서로  연관되거나  의존적인  객체들의  조합을  만드는  인터페이스를  제공하는 패턴&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;즉, 관련성  있는  여러  종류의  객체를  일관된  방식으로  생성하는  경우에  유용하다.&lt;/li&gt;
  &lt;li&gt;싱글턴  패턴, 팩토리  메서드  패턴을  사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/ds/abstract_factory.png&quot; alt=&quot;abstract_factory&quot; class=&quot;img-responsive center-block&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;역할이--수행하는--작업&quot;&gt;역할이  수행하는  작업&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;AbstractFactory : 실제  팩토리  클래스의  공통  인터페이스&lt;/li&gt;
  &lt;li&gt;ConcreteFactory : 구체적인  팩토리  클래스로 AbstractFactory 클래스의  추상  메서드를  오버라이드함으로써  구체적인  제품을  생성한다.&lt;/li&gt;
  &lt;li&gt;AbstractProduct : 제품의  공통  인터페이스&lt;/li&gt;
  &lt;li&gt;ConcreteProduct : 구체적인  팩토리  클래스에서  생성되는  구체적인  제품&lt;/li&gt;
&lt;/ul&gt;</content><author><name>hayagou</name></author><summary type="html">[디자인패턴] Abstract Factory Pattern</summary></entry></feed>